{"mappings":"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","sources":["src/js/markup/createmarkup.js","src/js/apisreq/gettrends.js","src/js/apisreq/getgenres.js","src/js/paginaton/pagination.js","src/js/apisreq/genresandtrends.js","src/js/index.js","src/js/apisreq/getserchquery.js"],"sourcesContent":["/**\n * render markup with films\n * @param {array} films\n */\nfunction createMarkUp(films) {\n  // console.log(films);\n  const gallery = document.querySelector('.gallery');\n  const genresArr = JSON.parse(localStorage.getItem('genres'));\n  const markup = films\n    .map(item => {\n      return `<li class=\"gallery__item\" data-id=\"${item.id}\">\n                <article>\n                    <img class=\"article__image\" src=\"${\n                      !item.poster_path\n                        ? 'https://img.freepik.com/free-vector/error-404-concept-for-landing-page_52683-20173.jpg?w=2000'\n                        : 'https://image.tmdb.org/t/p/w500' + item.poster_path\n                    }\" alt=\"${\n        item.original_title ? item.original_title : item.title\n      }\" width=\"280\" loading=\"lazy\">\n                    <h1 class=\"article__description\">${\n                      item.original_title ? item.original_title : item.title\n                    }</h1>\n                    <p class=\"article__description-orange\">\n                        <span class=\"pseudo-element\">\n                            ${returnFilms(item.genre_ids, genresArr)}\n                        </span>\n                        <span>\n                            ${item.release_date.slice(0, 4)}\n                        </span>\n                    </p>\n                </article>\n            </li>`;\n    })\n    .join('');\n\n  gallery.innerHTML = markup;\n}\n\n/**\n * return  string with genres\n * @param {Arr} arr  of genres_ids\n * @param {obj} genres\n * @returns  string\n */\nfunction returnFilms(arr, genres) {\n  // console.log('arr', arr);\n  // console.log('genres', genres);\n\n  const res = arr.map(item => {\n    return genres.genres\n      .filter(elem => {\n        // console.log(elem.id === item);\n        return elem.id === item;\n      })\n      .flatMap(one => one.name);\n  });\n  return `${\n    res.length >= 3 ? res.slice(0, 2).join(', ') + ', Others' : res.join(', ')\n  }`;\n}\nexport { createMarkUp };\n","// //----------------------------------------------//\nconst KEY_API = '7a4cd4317772102a9b88ef6a54b71590';\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n\n/**\n * Function get data from API with trend movies/day\n * @param {Number} page of pagination\n * @returns promisse with object\n */\nasync function getTrendMovies(page) {\n  const params = new URLSearchParams({\n    api_key: KEY_API,\n    page: page,\n  });\n  return await fetch(`${BASE_URL}?${params}`).then(r => r.json());\n}\n\nexport { getTrendMovies };\n","const KEY_API = '7a4cd4317772102a9b88ef6a54b71590';\nconst BASE_URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n/**\n * get data with genres from APi and set it into the Local storage\n * @returns array with genres\n */\nasync function getGenres() {\n  const params = new URLSearchParams({\n    api_key: KEY_API,\n  });\n  return await fetch(`${BASE_URL}?${params}`).then(r => r.json());\n}\n\n/**\n *\n * @param {*} params\n */\nfunction setupGenesToStorage(params) {\n  getGenres().then(data => {\n    localStorage.setItem('genres', JSON.stringify(data));\n  });\n}\n\nexport { setupGenesToStorage };\n","import { createMarkUp } from '../markup/createmarkup';\nimport { getTrendMovies } from '../apisreq/gettrends';\n\nconst refsPag = {\n  pagContainer: document.querySelector('.js-pagination'),\n};\n\nlet currentPage;\n\nfunction renderButtonsPag(page, totalPages) {\n  if (!page || !totalPages || totalPages === 1) {\n    return;\n  }\n  let markup = '';\n\n  const beforeOnePage = page - 1;\n  const beforeTwoPage = page - 2;\n  const afterOnePage = Number(page) + 1;\n  const afterTwoPage = Number(page) + 2;\n  currentPage = page;\n\n  if (page > 1) {\n    markup += `<li class=\"pagination__item\"><button class=\"previos\">\n        &larr;</button>\n      </li>`;\n  }\n  if (page > 3) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">1</button></li>`;\n  }\n  if (page > 4) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__dottes\">...</button></li>`;\n  }\n  if (page > 2) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">${beforeTwoPage}</button></li>`;\n  }\n  if (page > 1) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">${beforeOnePage}</button></li>`;\n  }\n  markup += `<li class=\"pagination__item\"><button class=\"pagination__btn active__btn\">${page}</button></li>`;\n\n  if (afterOnePage <= totalPages) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">${afterOnePage}</button></li>`;\n  }\n  if (afterTwoPage <= totalPages) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">${afterTwoPage}</button></li>`;\n  }\n\n  if (totalPages > page + 3) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__dottes\">...</button></li>`;\n  }\n  if (totalPages > page + 2) {\n    markup += `<li class=\"pagination__item\"><button class=\"pagination__btn\">${totalPages}</button></li>`;\n  }\n  if (totalPages > page) {\n    markup += `<li class=\"pagination__item\"><button class=\"next\">&rarr;</button></li>`;\n  }\n  refsPag.pagContainer.innerHTML = markup;\n}\n\nrefsPag.pagContainer.addEventListener('click', onClickPagBtn);\n\nfunction onClickPagBtn(event) {\n  if (\n    event.target.nodeName !== 'BUTTON' ||\n    event.target.textContent === '...'\n  ) {\n    return;\n  }\n\n  if (event.target.classList.contains('previos')) {\n    currentPage -= 1;\n  } else if (event.target.classList.contains('next')) {\n    currentPage += 1;\n  } else {\n    currentPage = event.target.textContent;\n  }\n\n  getTrendMovies(currentPage).then(d => {\n    createMarkUp(d.results);\n    renderButtonsPag(currentPage, d.total_pages);\n  });\n}\n\nexport { renderButtonsPag };\n","import { getTrendMovies } from './gettrends';\nimport { setupGenesToStorage } from './getgenres';\nimport { createMarkUp } from '../markup/createmarkup';\n//-----------------------------------------------------------//\n\nasync function getGenresPopfilms() {\n  await setupGenesToStorage();\n  let trendPage = 1;\n\n  return await getTrendMovies(trendPage);\n}\n\nexport { getGenresPopfilms };\n","import { createMarkUp } from './markup/createmarkup';\nimport { searchMovies } from './apisreq/getserchquery';\nimport { getGenresPopfilms } from './apisreq/genresandtrends';\nimport { renderButtonsPag } from './paginaton/pagination';\n//----------------------------------------------------------------//\n\ngetGenresPopfilms()\n  .then(data => {\n    console.log(data);\n    createMarkUp(data.results);\n    renderButtonsPag(1, data.total_pages);\n  })\n  .catch(er => console.log(er))\n  .finally(() => console.log('Some logic'));\n\nsearchMovies('batman', 1).then(data => console.log(data));\n","// //----------------------------------------------//\nconst KEY_API = '7a4cd4317772102a9b88ef6a54b71590';\nconst BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n\n/**\n * Get data from API with query snd page pagination\n * @param {String} query\n * @param {Number} page\n * @returns  object with data\n */\nasync function searchMovies(query, page) {\n  const params = new URLSearchParams({\n    api_key: KEY_API,\n    page,\n    query,\n  });\n  return await fetch(`${BASE_URL}?${params}`).then(r => r.json());\n}\n\nexport { searchMovies };\n"],"names":["$9d24f742dd1ac2db$export$ae228e3d7ccd1f7","films","gallery","document","querySelector","genresArr","JSON","parse","localStorage","getItem","markup","map","item","id","poster_path","original_title","title","arr","genres","res","filter","elem","flatMap","one","name","length","slice","join","$9d24f742dd1ac2db$var$returnFilms","genre_ids","release_date","innerHTML","async","$048ccacdcf1bc0ab$export$21088d0ca17de469","page","params","URLSearchParams","api_key","fetch","then","r","json","$77d7942edb66bd06$export$48228040be21069b","$77d7942edb66bd06$var$getGenres","data","setItem","stringify","$1b789ac6595e21ea$var$refsPag","pagContainer","$1b789ac6595e21ea$var$currentPage","$1b789ac6595e21ea$export$fea4ef3ec5f1268e","totalPages","beforeOnePage","beforeTwoPage","afterOnePage","Number","afterTwoPage","addEventListener","event","target","nodeName","textContent","classList","contains","d","results","total_pages","console","log","catch","er","finally","query"],"version":3,"file":"index.6031a38b.js.map"}